public class NumberOf1Bits {

    public int hammingWeight(long n) {
        return ((n & (1L << 31)) != 0 ? 1 : 0)
            + ((n & (1L << 30)) != 0 ? 1 : 0)
            + ((n & (1L << 29)) != 0 ? 1 : 0)
            + ((n & (1L << 28)) != 0 ? 1 : 0)
            + ((n & (1L << 27)) != 0 ? 1 : 0)
            + ((n & (1L << 26)) != 0 ? 1 : 0)
            + ((n & (1L << 25)) != 0 ? 1 : 0)
            + ((n & (1L << 24)) != 0 ? 1 : 0)
            + ((n & (1L << 23)) != 0 ? 1 : 0)
            + ((n & (1L << 22)) != 0 ? 1 : 0)
            + ((n & (1L << 21)) != 0 ? 1 : 0)
            + ((n & (1L << 20)) != 0 ? 1 : 0)
            + ((n & (1L << 19)) != 0 ? 1 : 0)
            + ((n & (1L << 18)) != 0 ? 1 : 0)
            + ((n & (1L << 17)) != 0 ? 1 : 0)
            + ((n & (1L << 16)) != 0 ? 1 : 0)
            + ((n & (1L << 15)) != 0 ? 1 : 0)
            + ((n & (1L << 14)) != 0 ? 1 : 0)
            + ((n & (1L << 13)) != 0 ? 1 : 0)
            + ((n & (1L << 12)) != 0 ? 1 : 0)
            + ((n & (1L << 11)) != 0 ? 1 : 0)
            + ((n & (1L << 10)) != 0 ? 1 : 0)
            + ((n & (1L << 9)) != 0 ? 1 : 0)
            + ((n & (1L << 8)) != 0 ? 1 : 0)
            + ((n & (1L << 7)) != 0 ? 1 : 0)
            + ((n & (1L << 6)) != 0 ? 1 : 0)
            + ((n & (1L << 5)) != 0 ? 1 : 0)
            + ((n & (1L << 4)) != 0 ? 1 : 0)
            + ((n & (1L << 3)) != 0 ? 1 : 0)
            + ((n & (1L << 2)) != 0 ? 1 : 0)
            + ((n & (1L << 1)) != 0 ? 1 : 0)
            + ((n & (1L)) != 0 ? 1 : 0);
    }
}
